package com.sonalake.choco;

import java.io.FileNotFoundException;
import java.util.HashSet;
import java.util.Set;

public class Checker {

    public static void main(String[] args) {
        int[] grind = { 4, 5, 20, 3, 13, 17, 29, 16, 35, 25, 9, 15, 11, 33, 30, 22, 6, 26, 21, 34, 2, 23, 8, 1, 28, 7,
                12, 14, 32, 24, 18, 27, 31, 36, 19, 10,
                10, 18, 27, 31, 36, 19, 17, 4, 5, 20, 3, 13, 16, 35, 25, 9, 15, 29, 22, 6, 26, 11, 33, 30, 34, 2, 23, 8,
                1, 21, 12, 14, 32, 24, 28, 7,
                7, 12, 14, 32, 24, 28, 19, 10, 18, 27, 31, 36, 4, 5, 20, 3, 13, 17, 9, 15, 29, 16, 35, 25, 6, 26, 11,
                33, 30, 22, 23, 8, 1, 21, 34, 2,
                2, 23, 8, 1, 21, 34, 28, 7, 12, 14, 32, 24, 10, 18, 27, 31, 36, 19, 3, 13, 17, 4, 5, 20, 15, 29, 16, 35,
                25, 9, 11, 33, 30, 22, 6, 26,
                11, 33, 30, 22, 6, 26, 2, 23, 8, 1, 21, 34, 12, 14, 32, 24, 28, 7, 36, 19, 10, 18, 27, 31, 17, 4, 5, 20,
                3, 13, 35, 25, 9, 15, 29, 16,
                16, 35, 25, 9, 15, 29, 26, 11, 33, 30, 22, 6, 23, 8, 1, 21, 34, 2, 24, 28, 7, 12, 14, 32, 19, 10, 18,
                27, 31, 36, 5, 20, 3, 13, 17, 4,
                34, 2, 23, 8, 1, 21, 24, 28, 7, 12, 14, 32, 19, 10, 18, 27, 31, 36, 20, 3, 13, 17, 4, 5, 9, 15, 29, 16,
                35, 25, 26, 11, 33, 30, 22, 6,
                26, 11, 33, 30, 22, 6, 34, 2, 23, 8, 1, 21, 7, 12, 14, 32, 24, 28, 31, 36, 19, 10, 18, 27, 13, 17, 4, 5,
                20, 3, 16, 35, 25, 9, 15, 29,
                29, 16, 35, 25, 9, 15, 6, 26, 11, 33, 30, 22, 2, 23, 8, 1, 21, 34, 32, 24, 28, 7, 12, 14, 36, 19, 10,
                18, 27, 31, 4, 5, 20, 3, 13, 17,
                17, 4, 5, 20, 3, 13, 15, 29, 16, 35, 25, 9, 26, 11, 33, 30, 22, 6, 1, 21, 34, 2, 23, 8, 24, 28, 7, 12,
                14, 32, 10, 18, 27, 31, 36, 19,
                19, 10, 18, 27, 31, 36, 13, 17, 4, 5, 20, 3, 29, 16, 35, 25, 9, 15, 30, 22, 6, 26, 11, 33, 21, 34, 2,
                23, 8, 1, 7, 12, 14, 32, 24, 28,
                28, 7, 12, 14, 32, 24, 36, 19, 10, 18, 27, 31, 17, 4, 5, 20, 3, 13, 25, 9, 15, 29, 16, 35, 22, 6, 26,
                11, 33, 30, 2, 23, 8, 1, 21, 34,
                21, 34, 2, 23, 8, 1, 32, 24, 28, 7, 12, 14, 36, 19, 10, 18, 27, 31, 5, 20, 3, 13, 17, 4, 25, 9, 15, 29,
                16, 35, 6, 26, 11, 33, 30, 22,
                6, 26, 11, 33, 30, 22, 21, 34, 2, 23, 8, 1, 28, 7, 12, 14, 32, 24, 27, 31, 36, 19, 10, 18, 3, 13, 17, 4,
                5, 20, 29, 16, 35, 25, 9, 15,
                15, 29, 16, 35, 25, 9, 22, 6, 26, 11, 33, 30, 34, 2, 23, 8, 1, 21, 14, 32, 24, 28, 7, 12, 31, 36, 19,
                10, 18, 27, 17, 4, 5, 20, 3, 13,
                13, 17, 4, 5, 20, 3, 9, 15, 29, 16, 35, 25, 6, 26, 11, 33, 30, 22, 8, 1, 21, 34, 2, 23, 32, 24, 28, 7,
                12, 14, 19, 10, 18, 27, 31, 36,
                36, 19, 10, 18, 27, 31, 3, 13, 17, 4, 5, 20, 15, 29, 16, 35, 25, 9, 33, 30, 22, 6, 26, 11, 1, 21, 34, 2,
                23, 8, 28, 7, 12, 14, 32, 24,
                24, 28, 7, 12, 14, 32, 31, 36, 19, 10, 18, 27, 13, 17, 4, 5, 20, 3, 35, 25, 9, 15, 29, 16, 30, 22, 6,
                26, 11, 33, 34, 2, 23, 8, 1, 21,
                3, 13, 17, 4, 5, 20, 25, 9, 15, 29, 16, 35, 22, 6, 26, 11, 33, 30, 23, 8, 1, 21, 34, 2, 14, 32, 24, 28,
                7, 12, 36, 19, 10, 18, 27, 31,
                31, 36, 19, 10, 18, 27, 20, 3, 13, 17, 4, 5, 9, 15, 29, 16, 35, 25, 11, 33, 30, 22, 6, 26, 8, 1, 21, 34,
                2, 23, 24, 28, 7, 12, 14, 32,
                32, 24, 28, 7, 12, 14, 27, 31, 36, 19, 10, 18, 3, 13, 17, 4, 5, 20, 16, 35, 25, 9, 15, 29, 33, 30, 22,
                6, 26, 11, 21, 34, 2, 23, 8, 1,
                1, 21, 34, 2, 23, 8, 14, 32, 24, 28, 7, 12, 31, 36, 19, 10, 18, 27, 4, 5, 20, 3, 13, 17, 35, 25, 9, 15,
                29, 16, 22, 6, 26, 11, 33, 30,
                22, 6, 26, 11, 33, 30, 1, 21, 34, 2, 23, 8, 24, 28, 7, 12, 14, 32, 18, 27, 31, 36, 19, 10, 20, 3, 13,
                17, 4, 5, 15, 29, 16, 35, 25, 9,
                9, 15, 29, 16, 35, 25, 30, 22, 6, 26, 11, 33, 21, 34, 2, 23, 8, 1, 12, 14, 32, 24, 28, 7, 27, 31, 36,
                19, 10, 18, 13, 17, 4, 5, 20, 3,
                27, 31, 36, 19, 10, 18, 5, 20, 3, 13, 17, 4, 25, 9, 15, 29, 16, 35, 26, 11, 33, 30, 22, 6, 23, 8, 1, 21,
                34, 2, 32, 24, 28, 7, 12, 14,
                14, 32, 24, 28, 7, 12, 18, 27, 31, 36, 19, 10, 20, 3, 13, 17, 4, 5, 29, 16, 35, 25, 9, 15, 11, 33, 30,
                22, 6, 26, 1, 21, 34, 2, 23, 8,
                8, 1, 21, 34, 2, 23, 12, 14, 32, 24, 28, 7, 27, 31, 36, 19, 10, 18, 17, 4, 5, 20, 3, 13, 16, 35, 25, 9,
                15, 29, 30, 22, 6, 26, 11, 33,
                30, 22, 6, 26, 11, 33, 8, 1, 21, 34, 2, 23, 32, 24, 28, 7, 12, 14, 10, 18, 27, 31, 36, 19, 5, 20, 3, 13,
                17, 4, 9, 15, 29, 16, 35, 25,
                25, 9, 15, 29, 16, 35, 33, 30, 22, 6, 26, 11, 1, 21, 34, 2, 23, 8, 7, 12, 14, 32, 24, 28, 18, 27, 31,
                36, 19, 10, 3, 13, 17, 4, 5, 20,
                20, 3, 13, 17, 4, 5, 35, 25, 9, 15, 29, 16, 30, 22, 6, 26, 11, 33, 2, 23, 8, 1, 21, 34, 12, 14, 32, 24,
                28, 7, 31, 36, 19, 10, 18, 27,
                5, 20, 3, 13, 17, 4, 16, 35, 25, 9, 15, 29, 33, 30, 22, 6, 26, 11, 34, 2, 23, 8, 1, 21, 7, 12, 14, 32,
                24, 28, 27, 31, 36, 19, 10, 18,
                18, 27, 31, 36, 19, 10, 4, 5, 20, 3, 13, 17, 35, 25, 9, 15, 29, 16, 6, 26, 11, 33, 30, 22, 2, 23, 8, 1,
                21, 34, 14, 32, 24, 28, 7, 12,
                12, 14, 32, 24, 28, 7, 10, 18, 27, 31, 36, 19, 5, 20, 3, 13, 17, 4, 15, 29, 16, 35, 25, 9, 26, 11, 33,
                30, 22, 6, 8, 1, 21, 34, 2, 23,
                23, 8, 1, 21, 34, 2, 7, 12, 14, 32, 24, 28, 18, 27, 31, 36, 19, 10, 13, 17, 4, 5, 20, 3, 29, 16, 35, 25,
                9, 15, 33, 30, 22, 6, 26, 11,
                33, 30, 22, 6, 26, 11, 23, 8, 1, 21, 34, 2, 14, 32, 24, 28, 7, 12, 19, 10, 18, 27, 31, 36, 4, 5, 20, 3,
                13, 17, 25, 9, 15, 29, 16, 35,
                35, 25, 9, 15, 29, 16, 11, 33, 30, 22, 6, 26, 8, 1, 21, 34, 2, 23, 28, 7, 12, 14, 32, 24, 10, 18, 27,
                31, 36, 19, 20, 3, 13, 17, 4, 5 };

        int[][] board = generateSudoku(grind, 36);
        System.out.println(isSudokuValid(board));

    }

    public static int[][] generateSudoku(int[] input, int size) {
        int[][] grid = new int[size][size];

        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                grid[i][j] = input[i * size + j];
            }
        }

        return grid;
    }

    public static boolean isSudokuValid(int[][] board) {
        int size = board.length;
        int root = (int) Math.sqrt(size);
        Set<String> seen = new HashSet<>();
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                int num = board[i][j];
                if (num != 0) {
                    if (!seen.add(num + "row" + i) || !seen.add(num + "col" + j)
                            || !seen.add(num + "box" + i / root + "-" + j / root)) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
    // this function checks if the sudoku is valid or not by doing the following:
    // 1. check if the row has the same number
    // 2. check if the column has the same number
    // 3. check if the box has the same number
    // if any of the above conditions are true, then the sudoku is not valid

}
